<!DOCTYPE html>
<html ng-app="SearchApp">
  <head>
    <title>{{'sitetitle'|translate}}</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="FedShare - A Federated Search Engine for Z39.50 & OAI-PMH protocols">
    <meta name="keywords" content="FedShare,Library,Technological Institute of Western Macedonia,Federated Search,Βιβλιοθήκη Τ.Ε.Ι Δυτικής Μακεδονίας,Ομόσπονδη Αναζήτηση">

    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme.css">
    <!--STYLES END-->

    <style>
      body {
        margin-top:10px;
        background: transparent url("images/bg.jpg") no-repeat top center fixed;
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
        background-size: cover; }
      .container {
        padding-right: 0px !important;
        padding-left: 0px !important;
        margin-right: auto !important;
        margin-left: auto !important;
      }
      .st-selected {
        background: #216eff !important;
        color: white !important;
      }

      .select-page {
        width: 50px;
        text-align: center;
        cursor: pointer;
      }
      .pagination li a input {
        padding: 0;
        margin: -5px 0;
        cursor: pointer;
      }
      .center-block {
        display: block;
        margin-left: auto;
        margin-right: auto;
      }
    </style>

  </head>

  <body ng-controller="ScrollCtrl">
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular.js"></script>
    <script src="/js/dependencies/angular-translate.min.js"></script>
    <script src="/js/dependencies/jquery.min.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/ui-bootstrap.min.js"></script>
    <script src="/js/dependencies/ui-bootstrap-tpls.min.js"></script>
    <script src="/js/dependencies/smart-table.min.js"></script>
    <script src="/js/app.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
